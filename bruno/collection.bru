headers {
  X-Gravitee-Api-Key: {{apiKey}}
  x-user-club-id: {{userClubId}}
  x-user-network-node-id: {{userNetworkNodeId}}
}

script:pre-request {
  ////////////////////////////
  //         imports        //
  ////////////////////////////
  const axios = require('axios');
  const moment = require('moment');
  const btoa = require('btoa');

  ////////////////////////////
  //         globals        //
  ////////////////////////////
  const method = req.getMethod();
  const url = req.getUrl();
  const hashCredentials = btoa(`${bru.getEnvName()}!${bru.getEnvVar("clientId")}!${bru.getEnvVar("clientSecret")}`);
  
  ////////////////////////////
  //         functions      //
  ////////////////////////////

  /////////////////////////////
  // auto-autenticate member //
  /////////////////////////////
  
  if (
    bru.getProcessEnv('DISABLE_MEMBER_AUTO_AUTHENTICATION') !== "true" &&
    (
      !bru.getVar("JwtToken") ||
      (bru.getVar("JwtTokenExpiresAt") && moment(bru.getVar("JwtTokenExpiresAt")).isBefore(moment())) ||
      bru.getVar("CredentialsHash") !== hashCredentials
    ) &&
    ! (url.startsWith('https://{{host}}/oauth/v2/token'))
  ) {
    try {
      const res = await (async () => {
        return await axios.post(
          `https://${bru.getEnvVar("host")}/${bru.getEnvVar("environment")}/oauth/v2/token`,
          {
            "client_id": `${bru.getEnvVar("clientId")}`,
            "client_secret": `${bru.getEnvVar("clientSecret")}`,
            "grant_type": "client_credentials"
          },
          {
            headers: {
              'X-Gravitee-Api-Key': bru.getEnvVar('apiKey'),
              'Content-Type': 'multipart/form-data'
            }
          }
        );
      })();

      bru.setVar("JwtToken", res.data.access_token);
      bru.setVar("JwtTokenExpiresAt", moment().add(res.data.expires_in, 'seconds').format());
      bru.setVar("CredentialsHash", hashCredentials);
    } catch (e) {
      console.error('unable to auto-authenticate', e, e?.response?.data);

      bru.setVar("JwtToken", null);
      bru.setVar("RefreshToken", null);
      bru.setVar("userId", null);

      bru.setVar("JwtTokenExpiresAt", null);
      bru.setVar("RefreshTokenExpiresAt", null);
      bru.setVar("CredentialsHash", null);
    }
  }
}
