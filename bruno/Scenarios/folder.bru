meta {
  name: Scenarios
}

script:pre-request {
  ////////////////////////////
  //         imports        //
  ////////////////////////////
  const axios = require('axios');
  const moment = require('moment');
  const btoa = require('btoa');
  
  ////////////////////////////
  //         globals        //
  ////////////////////////////
  const method = req.getMethod();
  const url = req.getUrl();
  const hashCredentials = btoa(``);
  
  ////////////////////////////
  //         functions      //
  ////////////////////////////
  /////////////////////////////
  // auto-autenticate member //
  /////////////////////////////
  if (
    bru.getProcessEnv('DISABLE_MEMBER_AUTO_AUTHENTICATION') !== "true" &&
    // ignore if token already exists and is not exipired
    (
      !bru.getVar("jwtToken") ||
      (bru.getVar("jwtTokenExpiresAt") && moment(bru.getVar("jwtTokenExpiresAt")).isBefore(moment()))
    )
  ) {
    const isRefreshTokenValid = false; // @todo
  
    try {
      const res = await (async () => {
        if (isRefreshTokenValid) {
          console.log('auto-autenticate member using refresh token');
  
          try {
            return await axios.postForm(
              `https://${bru.getEnvVar("host")}/${bru.getEnvVar("clientToken")}/oauth/v2/token`,
              {
                "client_id": `${bru.getEnvVar("clientId")}`,
                "client_secret": `${bru.getEnvVar("clientSecret")}`,
                "grant_type": "refresh_token",
                "refresh_token": `${bru.getVar("refreshToken")}`,
              }
            );
          } catch (e) {
            console.error('unable to auto-authenticate using refresh token', e, e?.response?.data);
          }
        }
  
        console.log('auto-autenticate using client_credentials');
        console.log(`https://${bru.getEnvVar("host")}/${bru.getEnvVar("clientToken")}/oauth/v2/token`);
        console.log({
          "client_id": `${bru.getEnvVar("clientId")}`,
          "client_secret": `${bru.getEnvVar("clientSecret")}`,
          "grant_type": "client_credentials"
        });
  
        return await axios.postForm(
          `https://${bru.getEnvVar("host")}/${bru.getEnvVar("clientToken")}/oauth/v2/token`,
          {
            "client_id": `${bru.getEnvVar("clientId")}`,
            "client_secret": `${bru.getEnvVar("clientSecret")}`,
            "grant_type": "client_credentials"
          }
        );
      })();
  
      bru.setVar("jwtToken", res.data.access_token);
  
      bru.setVar("jwtTokenExpiresAt", moment().add(res.data.expires_in, 'seconds').format());
      bru.setVar("memberCredentialsHash", hashMemberCredentials);
    } catch (e) {
      console.error('unable to auto-authenticate', e, e?.response?.data);
  
      bru.setVar("jwtToken", null);
      bru.setVar("jwtTokenExpiresAt", null);
    }
  }
  
}
